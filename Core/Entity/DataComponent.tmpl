namespace minish
{
    template<class T>
    void DataComponent::setData(std::string data_id, T& data)
    {
        std::unordered_map<std::string, Data>::iterator it = m_data.find(data_id);

        if (it == m_data.end())
        {
            registerData(data_id, data);
            return;
        }

        *(T*)m_data[data_id].custom_data = data;
        //m_data[data_id].custom_data = (void*)&data;
    }

    template <class T>
    void DataComponent::registerData(std::string data_id, T& data)
    {
        std::unordered_map<std::string, Data>::iterator it = m_data.find(data_id);

        if (!(it == m_data.end()))
            return;

        minish::Data new_data;
        new_data.custom_data = (void*)&data;
        m_data.insert(std::pair<std::string, Data>(data_id, new_data));
    }
}