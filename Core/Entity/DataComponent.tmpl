namespace minish
{

    template <class T>
    bool DataComponent::registerData(std::string data_id, T& data)
    {
        std::unordered_map<std::string, void*>::iterator it = m_data.find(data_id);

        if (!(it == m_data.end()))
            return false;

        m_data.insert(std::pair<std::string, void*>(data_id, (void*)&data));
        return true;
    }

    template<class T>
    bool DataComponent::setData(std::string data_id, T& data)
    {
        std::unordered_map<std::string, void*>::iterator it = m_data.find(data_id);

        if (it == m_data.end())
            return false;

        if ((T*)m_data[data_id] == nullptr)
            return false;

        *(T*)m_data[data_id] = data;
        return true;
    }
}